put gradle file in your module

  //Retrofit latest version
    //compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.google.code.gson:gson:2.6.2'
    compile ('com.squareup.retrofit2:retrofit:2.1.0') {
        // exclude Retrofitâ€™s OkHttp peer-dependency module and define your own module import
        exclude module: 'okhttp'
    }
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.3.1'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'io.reactivex:rxandroid:1.0.1'

    compile 'io.reactivex:rxjava:1.1.6'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'



    //DBFLOW
    apt "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
    // use kapt for kotlin apt
    compile "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
    compile "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"

    // kotlin extensions
    compile "com.github.Raizlabs.DBFlow:dbflow-kotlinextensions:${dbflow_version}"

2) project Gradle file


// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://www.jitpack.io" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

3) declare db flow in application class

 FlowManager.init(new FlowConfig.Builder(this).build());

4) app class for creating database

@Database(name = PuncturePointDB.NAME, version = PuncturePointDB.VERSION)
public class PuncturePointDB {

    public static final String NAME = "PuncturePoint_DB";

    public static final int VERSION = 1;

}

5) model creation table 
  @Table(name = Banner_Table.TABLE_NAME , database = PuncturePointDB.class)
    public class Banner_Table extends BaseModel
    {
        public static final String TABLE_NAME = "Banner_Table";

        @PrimaryKey
        @Column
        @Expose
        private String image_id;
        @Expose
        private String image_url;

        public String getImage_id() {
            return image_id;
        }

        public void setImage_id(String image_id) {
            this.image_id = image_id;
        }

        public String getImage_url() {
            return image_url;
        }

        public void setImage_url(String image_url) {
            this.image_url = image_url;
        }

    }

6) database operation
  ==> save 
          loginTable.save();


 List<PuncturePointProvider_Table> puncturePointProviderTables_list = new Select().from(PuncturePointProvider_Table.class)
                .where(PuncturePointProvider_Table_Table.type_of_provider.eq("2"))
                .queryList();


7) api releated class

public interface WebApi1 {

    //public static final String BASE_URL =  "http://192.168.1.34/puncturepoint/api/v1/";
    public static final String BASE_URL = "http://magentodevelopments.com/puncturepoint/api/v1/";

    //http://magentodevelopments.com/puncturepoint/api/v1/?tag=edit_profile_enduser&user_name=Test1&email=Test@gmail.com

    public static String TAG = "tag";
    public static String MOBILE = "mobile";
    public static String PASSWORD = "password";
  
    @POST(BASE_URL)
    Call<LoginResponse> getLogin(@Query(TAG) String tag,
                                 @Query(MOBILE) String mobile,
                                 @Query(PASSWORD) String password);

   
}

=====================
public class WebApiClient1 {

    private WebApi webApi;
    public static WebApiClient1 webApiClient;
    private static Context mcontext;
    public static WebApiClient1 getInstance(Context context) {
        if (webApiClient == null)
            webApiClient = new WebApiClient1();
            mcontext = context;
        return webApiClient;

    }
    private WebApiClient1() {
        //just an empty constructor for now
    }

    public WebApi getWebApi_without_Token() {

        System.setProperty("http.keepAlive", "false");

        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();
        logging.setLevel(HttpLoggingInterceptor.Level.BODY);

        OkHttpClient client = new OkHttpClient.
                Builder().
                addInterceptor(logging).
                build();


        client.connectTimeoutMillis();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(WebApi.BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
                .client(client)
                .build();

        webApi = retrofit.create(WebApi.class);

        return webApi;
    }
    
}




7) api calling method

 if (ConnectionUtil.isInternetAvailable(mActivity)) {
            Methods.isProgressShow(mActivity);
            Call<PunctureProvideUserResponse> response_Call = WebApiClient.getInstance(mActivity).getWebApi_another().sendppprovideruser(Tag_Puncture_Service_provider, name, email, address, shop_name, desc, open, close, is_247, latitude, longitude);
            response_Call.enqueue(new Callback<PunctureProvideUserResponse>() {
                @Override
                public void onResponse(Call<PunctureProvideUserResponse> call, Response<PunctureProvideUserResponse> response) {
                    if (response.code() == 200) {
                        PunctureProvideUserResponse punctureProvideUserResponse = response.body();
                        String status = punctureProvideUserResponse.getStatus();
                        if (status.equals(CommonMsgsAndKeys.SUCCESS)) {

                            String token_value = Common_Methods.getLoginUser().getToken();
                            Delete.tables(Login_Table.class);
                            Login_Table loginTable = punctureProvideUserResponse.getData();
                            loginTable.setToken(token_value);
                            loginTable.save();
                            
                        } else  (status.equals(CommonMsgsAndKeys.FAILURE)) {
                           Toast.makeText(getActivity(),response.body().getMessage().toString(),Toast.LENGTH_SHORT).show();
                        }
                        Methods.isProgressHide();
                    } else {
                        Toast.makeText(getActivity(),response.body().getMessage().toString(),Toast.LENGTH_SHORT).show();
                        Methods.isProgressHide();
                    }
                }

                @Override
                public void onFailure(Call<PunctureProvideUserResponse> call, Throwable t) {
                    t.printStackTrace();
                   Toast.makeText(getActivity(),"" + t.getMessage(),Toast.LENGTH_SHORT).show();
                }
            });
        } else {
            Methods.ShowSnackbar(mActivity.rl_container, CommonMsgsAndKeys.noInternet);

        }





8) For Add Header as Token


 public WebApi getWebApi_another(){

        try{
            System.setProperty("http.keepAlive", "false");

            if(Common_Methods.getLoginUser()!=null){
                token = Common_Methods.getLoginUser().getToken();
            }

            HttpLoggingInterceptor logging = new HttpLoggingInterceptor();
            logging.setLevel(HttpLoggingInterceptor.Level.BODY);

            OkHttpClient.Builder httpClient = new OkHttpClient.Builder();

            System.out.println("TOKEN"+token);
            Interceptor interceptor = new Interceptor() {
                @Override
                public Response intercept(Chain chain) throws IOException {

                    Request newRequest = chain.request().newBuilder()
                            .removeHeader("Token")
                            .addHeader("Token", token).build();
                    return chain.proceed(newRequest);
                }
            };
            httpClient.addInterceptor(interceptor);
            httpClient.addInterceptor(logging);




            OkHttpClient client = httpClient.build();
            Retrofit retrofit = new Retrofit.Builder()
                    .baseUrl(WebApi.BASE_URL)
                    .addConverterFactory(GsonConverterFactory.create())
                    .client(client)
                    .build();

            webApi = retrofit.create(WebApi.class);
            return webApi;

        }catch (Exception e){
            e.printStackTrace();
            return null;
        }

    }



